import type { Meta } from './Meta';
import type { PayloadSubscription, PayloadAndSubscription, onPayloadEvent, XummJsonTransaction, XummPostPayloadBodyJson, XummPostPayloadBodyBlob, CreatedPayload, DeletedPayload, XummPayload } from './types';
export declare class Payload {
    private Meta;
    constructor(MetaObject: Meta);
    resolvePayload(payload: string | XummPayload | CreatedPayload): Promise<XummPayload | null>;
    create(payload: XummPostPayloadBodyJson | XummPostPayloadBodyBlob | XummJsonTransaction, returnErrors?: boolean): Promise<CreatedPayload | null>;
    get(payload: string | CreatedPayload, returnErrors?: boolean): Promise<XummPayload | null>;
    subscribe(payload: string | XummPayload | CreatedPayload, callback?: onPayloadEvent): Promise<PayloadSubscription>;
    cancel(payload: string | XummPayload | CreatedPayload, returnErrors?: boolean): Promise<DeletedPayload | null>;
    createAndSubscribe(payload: XummPostPayloadBodyJson | XummPostPayloadBodyBlob | XummJsonTransaction, callback?: onPayloadEvent): Promise<PayloadAndSubscription>;
}
